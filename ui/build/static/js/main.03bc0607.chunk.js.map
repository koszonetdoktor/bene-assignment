{"version":3,"sources":["utils/axios.ts","screens/login/login.tsx","screens/login/index.tsx","actions/actionTypes.ts","screens/cities/components/citiesList/citiesList.tsx","screens/cities/components/citiesList/index.tsx","actions/listActions.ts","screens/cities/types.ts","screens/cities/components/citySelector/components/filteredCityList/filteredCityList.tsx","screens/cities/components/citySelector/components/filteredCityList/index.ts","screens/cities/components/withBackNavigation/withBackNavigation.tsx","screens/cities/components/withBackNavigation/index.tsx","screens/cities/components/citySelector/citySelector.tsx","screens/cities/components/citySelector/index.tsx","screens/cities/components/cityWeather/cityWeather.tsx","screens/cities/components/cityWeather/index.tsx","screens/cities/cities.tsx","screens/cities/index.tsx","reducers/index.ts","components/withAuthentication.tsx","components/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","Login","props","_useState","useState","name","pw","_useState2","Object","slicedToArray","credentials","setCredentials","_useState3","_useState4","isLoginError","setIsLoginError","onInputChange","event","objectSpread","defineProperty","target","value","react_default","a","createElement","className","type","autoFocus","onChange","onClick","body","password","post","then","history","push","catch","GET_CITIES_SUCCESS","GET_CITIES_FAIL","ADD_CITY_TO_LIST_SUCCESS","ADD_CITY_TO_LIST_FAIL","CitiesList","connect","store","userCities","citiesList","dispatch","getCitiesList","console","log","get","resp","types","payload","data","err","useEffect","length","map","userCity","key","geonameid","cityId","match","concat","path","url","defaultCity","timezone","FilteredCityList","cities","city","cutName","substring","onCitySelected","withBackNavigation","WrappedPage","goBack","CitySelector","addCity","addCityToList","setCity","filteredCities","setFilteredCities","components_filteredCityList","selected","currName","disabled","CityWeather","ownProps","chosenCity","find","Number","params","id","cityName","weatherInfo","setWeatherInfo","error","react","weather","stateIconId","description","moment","tz","format","temperature","unix","sunriseTime","sunsetTime","Cities","react_router","exact","component","defaultState","withAuthentication","WrappedComponent","_React$Component","Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","isAuth","loading","inherits","createClass","_this2","setState","to","React","createStore","undefined","action","toConsumableArray","applyMiddleware","thunk","App","es","react_router_dom","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03bc0607.chunk.js","sourcesContent":["import axios from \"axios\"\nlet instance = axios.create()\nexport default instance","import React, { useState } from \"react\"\nimport axios from \"../../utils/axios\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport \"./index.css\"\n\nfunction Login(props: RouteComponentProps) {\n    const [credentials, setCredentials] = useState<{ name: string, pw: string }>({ name: \"\", pw: \"\" })\n    const [isLoginError, setIsLoginError] = useState<boolean>(false)\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCredentials({\n            ...credentials,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    const onFormSubmit = () => {\n        const body = {\n            name: credentials.name,\n            password: credentials.pw\n        }\n        axios.post(\"/authenticate\", body)\n            .then(() => {\n                props.history.push(\"/cities\")\n            })\n            .catch(() => {\n                setIsLoginError(true)\n            })\n    }\n    return (\n        <div className=\"form__container\">\n            <div className=\"form__input-form\">\n                <label className=\"form__input-label\">Username</label>\n                <input\n                    className=\"form__text-input\"\n                    type=\"text\"\n                    name=\"name\"\n                    autoFocus={true}\n                    value={credentials.name}\n                    onChange={onInputChange}\n                />\n            </div>\n            <div className=\"form__input-form\">\n                <label className=\"form__input-label\">Password</label>\n                <input\n                    className=\"form__text-input\"\n                    type=\"password\"\n                    name=\"pw\"\n                    value={credentials.pw}\n                    onChange={onInputChange}\n                />\n            </div>\n            <button className=\"btn\" onClick={onFormSubmit}>Login</button>\n            {isLoginError && <span>ERROR</span>}\n        </div>\n    )\n}\nexport default Login","import Login from \"./login\"\nexport default Login","export const GET_CITIES_SUCCESS = \"GET_CITIES_SUCCESS\"\nexport const GET_CITIES_FAIL = \"GET_CITIES_FAIL\"\nexport const ADD_CITY_TO_LIST_SUCCESS = \"ADD_CITY_TO_LIST_SUCCESS\"\nexport const ADD_CITY_TO_LIST_FAIL = \"ADD_CITY_TO_LIST_FAIL\"","import React, { useEffect } from \"react\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../../reducers\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport { getCitiesList } from \"../../../../actions/listActions\"\nimport { City } from \"../../types\"\nimport \"./index.css\"\n\ntype Props = RouteComponentProps & {\n    userCities: City[],\n    getCitiesList: () => void\n}\n\nfunction CitiesList(props: Props) {\n    useEffect(() => {\n        if (props.userCities.length === 0) {\n            props.getCitiesList()\n        }\n    }, [props.userCities])\n\n    const onAddNewCity = () => {\n        props.history.push(`${props.match.url}/select`)\n    }\n\n    const onSelectCity = (cityId: number | null) => () => {\n        console.log(\"mathc\", props.match)\n        props.history.push(`${props.match.path}/weather/${cityId}`)\n    }\n\n    const renderCities = () => {\n        return props.userCities.map(userCity => {\n            return (\n                <li\n                    className=\"cities__city-name\"\n                    key={userCity.geonameid as number}\n                    onClick={onSelectCity(userCity.geonameid)}\n                >\n                    {userCity.name}\n                </li>\n            )\n        })\n    }\n\n    return (\n        <ul className=\"cities__list\">\n            {renderCities()}\n            <li\n                className=\"cities__add-city\"\n                key=\"plus\"\n                onClick={onAddNewCity}\n            >\n                +\n            </li>\n        </ul>\n    )\n}\n\nconst mapStateToProps = (store: State) => {\n    return {\n        userCities: store.citiesList\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getCitiesList: () => {\n            dispatch(getCitiesList())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CitiesList)","import CitiesList from \"./citiesList\"\nexport default CitiesList","import axios from \"../utils/axios\"\nimport * as types from \"./actionTypes\"\nimport { City } from \"../screens/cities/types\"\n\nexport const getCitiesList = () => (dispatch) => {\n    console.log(\"GOT\")\n    axios.get(\"/users/cities\")\n        .then((resp) => {\n            dispatch({\n                type: types.GET_CITIES_SUCCESS,\n                payload: resp.data\n            })\n        }).catch(err => {\n            dispatch({\n                type: types.GET_CITIES_FAIL\n            })\n        })\n}\n\nexport const addCityToList = (city: City) => (dispatch) => {\n    axios.post(\"/users/cities\", {\n        cityId: city.geonameid\n    })\n        .then(() => {\n            dispatch({\n                type: types.ADD_CITY_TO_LIST_SUCCESS,\n                payload: city\n            })\n        }).catch(err => {\n            dispatch({\n                type: types.ADD_CITY_TO_LIST_FAIL\n            })\n        })\n}","export interface City {\n    geonameid: number | null\n    name: string\n    timezone: string\n}\n\nexport const defaultCity: City = {\n    geonameid: null,\n    name: \"\",\n    timezone: \"\"\n}","import React from \"react\"\nimport { City } from \"../../../../types\";\n\ninterface Props {\n    cities: City[]\n    currName: string\n    onCitySelected: (selected: City) => () => void\n}\n\nfunction FilteredCityList(props: Props) {\n    return (\n        <ul className=\"selector__filtered-list\">\n            {props.cities.map(city => {\n                const cutName = city.name.length > 20 ? `${city.name.substring(0, 17)}...` : city.name\n                // const splitter = new RegExp(props.currName, \"gi\")\n                // const splitName = cutName.split(splitter)\n                return (\n                    <li\n                        className=\"selector__list-element\"\n                        key={city.geonameid as number}\n                        onClick={props.onCitySelected(city)}\n                    >\n                        {cutName}\n                        {/* {splitName[0]}<span>{props.currName}</span>{splitNanew RegExp(replace,\"g\")me[1]} */}\n                    </li>\n                )\n            })}\n        </ul>\n    )\n}\nexport default FilteredCityList","import FilteredCityList from \"./filteredCityList\"\nexport default FilteredCityList","import React from \"react\";\nimport \"./index.css\"\n\nfunction withBackNavigation(WrappedPage) {\n    return function (props) {\n        const onNavigateBack = () => {\n            props.history.goBack()\n        }\n        return (\n            <div>\n                <span className=\"back-nav__arrow\" onClick={onNavigateBack} >{\"<\"}</span>\n                <WrappedPage {...props} />\n            </div>\n        )\n    }\n}\nexport default withBackNavigation","import withBackNavigation from \"./withBackNavigation\"\nexport default withBackNavigation","import React, { useState, useEffect } from \"react\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport axios from \"../../../../utils/axios\"\nimport { City, defaultCity } from \"../../types\"\nimport FilteredCityList from \"./components/filteredCityList\"\nimport { connect } from \"react-redux\"\nimport { addCityToList } from \"../../../../actions/listActions\"\nimport withBackNavigation from \"../withBackNavigation\"\nimport \"./index.css\"\n\ntype Props = RouteComponentProps & {\n    addCity: (city: City) => void\n}\n\nfunction CitySelector(props: Props) {\n    const [city, setCity] = useState<City>(defaultCity)\n    const [filteredCities, setFilteredCities] = useState<City[]>([])\n\n    useEffect(() => {\n        if (city.name !== \"\") {\n            axios.get(`/city/${city.name}`)\n                .then((resp) => {\n                    setFilteredCities(resp.data)\n                })\n        } else {\n            setFilteredCities([])\n        }\n    }, [city])\n\n    const onCityNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCity({\n            geonameid: null,\n            timezone: \"\",\n            name: event.target.value\n        })\n    }\n\n    const onSave = () => {\n        props.addCity(city)\n    }\n\n    const onCitySelected = (selected: City) => () => {\n        setCity(selected)\n    }\n\n    return (\n        <div className=\"form__container\">\n            <div className=\"form__input-form\">\n                <input\n                    className=\"form__text-input\"\n                    type=\"text\"\n                    autoFocus={true}\n                    value={city.name}\n                    onChange={onCityNameChanged}\n                />\n            </div>\n            <FilteredCityList\n                cities={filteredCities}\n                onCitySelected={onCitySelected}\n                currName={city.name}\n            />\n            <button\n                className=\"btn \"\n                disabled={city.geonameid === null}\n                onClick={onSave}\n            >\n                Save\n            </button>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addCity: (city: City) => dispatch(addCityToList(city))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(withBackNavigation(CitySelector))","import CitySelector from \"./citySelector\"\nexport default CitySelector","import React, { useEffect, useState, Fragment } from \"react\"\nimport withBackNavigation from \"../withBackNavigation\"\nimport { RouteComponentProps } from \"react-router-dom\"\nimport axios from \"../../../../utils/axios\"\nimport { WeatherInfo } from \"./types\"\nimport moment from \"moment-timezone\"\nimport { connect } from \"react-redux\"\nimport { State } from \"../../../../reducers\";\nimport \"./index.css\"\n\ntype Props = RouteComponentProps<{ id: string }> & {\n    timezone: string\n    cityName: string\n}\n\nfunction CityWeather(props: Props) {\n\n    const [weatherInfo, setWeatherInfo] = useState<WeatherInfo | null>(null)\n\n    useEffect(() => {\n        axios.get(`/weather/${props.match.params.id}`)\n            .then((resp) => {\n                setWeatherInfo(resp.data)\n            }).catch(err => {\n                console.error(\"ERROR\", err)\n            })\n    }, [])\n\n    return (\n        <Fragment>\n            {weatherInfo &&\n                <div className=\"weather__container\">\n                    <div className=\"weather__info-block\">\n                        <i className=\"wi-day-sleet-storm\">{weatherInfo.weather.stateIconId}</i>\n                        <span>{weatherInfo.weather.description}</span>\n                    </div>\n                    <div className=\"weather__info-block weather__info-block--first-ordered\">\n                        <span className=\"weather__current-time\">{moment.tz(props.timezone).format(\"HH\")}</span>\n                        <span className=\"weather__current-time\">{moment.tz(props.timezone).format(\"mm\")}</span>\n                        <span className=\"waether__city-name\">{props.cityName}</span>\n                    </div>\n                    <div className=\"weather__info-block\">\n                        <span className=\"weather__temp\">{weatherInfo.temperature} &#8451;</span>\n                        <span className=\"weather__end-time\">{moment.unix(weatherInfo.sunriseTime).tz(props.timezone).format(\"HH:mm\")}</span>\n                        <span className=\"weather__end-time\">{moment.unix(weatherInfo.sunsetTime).tz(props.timezone).format(\"HH:mm\")}</span>\n                    </div>\n                </div>\n            }\n        </Fragment>\n    )\n}\n\nconst mapStateToProps = (store: State, ownProps: Props) => {\n    const chosenCity = store.citiesList.find(city => city.geonameid === Number(ownProps.match.params.id))\n    return {\n        timezone: chosenCity ? chosenCity.timezone : \"\",\n        cityName: chosenCity ? chosenCity.name : \"\"\n    }\n}\n\nexport default connect(mapStateToProps)(withBackNavigation(CityWeather))","import CityWeather from \"./cityWeather\"\nexport default CityWeather\n","import React, { Fragment } from \"react\"\nimport { BrowserRouter as Router, Route, RouteComponentProps } from \"react-router-dom\"\nimport CitiesList from \"./components/citiesList\"\nimport CitySelector from \"./components/citySelector\"\nimport CityWeather from \"./components/cityWeather\"\n\nfunction Cities(props: RouteComponentProps) {\n    return (\n        <Fragment>\n            <Route exact path={props.match.path} component={CitiesList} />\n\n            <Route path={`${props.match.path}/select`} component={CitySelector} />\n            <Route path={`${props.match.path}/weather/:id`} component={CityWeather} />\n        </Fragment>\n    )\n}\nexport default Cities","import Cities from \"./cities\"\nexport default Cities","import * as types from \"../actions/actionTypes\"\nimport { City } from \"../screens/cities/types\";\n\nexport interface State {\n    citiesList: City[]\n}\n\nconst defaultState: State = {\n    citiesList: []\n};\n\nexport default function citiesListReducer(state: State = defaultState, action: any): State {\n    console.log(\"update\", action)\n    switch (action.type) {\n        case types.GET_CITIES_SUCCESS:\n            return {\n                citiesList: action.payload\n            }\n        case types.GET_CITIES_FAIL:\n        //TODO\n        case types.ADD_CITY_TO_LIST_FAIL:\n        //TODO\n        case types.ADD_CITY_TO_LIST_SUCCESS:\n            return {\n                ...state,\n                citiesList: [...state.citiesList, action.payload]\n            }\n        default:\n            return state\n    }\n}","import React from \"react\";\nimport axios from \"../utils/axios\"\nimport { Redirect } from \"react-router\";\n\nfunction withAuthentication(WrappedComponent) {\n    return class Component extends React.Component {\n        state = {\n            isAuth: true,\n            loading: true\n        }\n\n        componentDidMount() {\n            axios.get(\"/validateCredentials\")\n                .then(() => {\n                    this.setState({ loading: false })\n                }).catch(() => {\n                    this.setState({ isAuth: false, loading: false })\n                })\n        }\n\n        render() {\n            if (this.state.loading) {\n                return null\n            }\n            else if (this.state.isAuth) {\n                return <WrappedComponent {...this.props} />\n            } else {\n                return <Redirect to=\"/\" />\n            }\n        }\n\n    }\n}\nexport default withAuthentication","import withAuthentication from \"./withAuthentication\"\nexport default withAuthentication","import React, { useState, useEffect } from 'react';\nimport axios from \"./utils/axios\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport Login from \"./screens/login\"\nimport Cities from \"./screens/cities\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport reducer, { State } from \"./reducers\"\nimport { Provider } from \"react-redux\"\nimport withAuthentication from './components';\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunk)\n)\n\nconst App = () => {\n    const [credentials, setCredentials] = useState<{ name: string, pw: string }>({ name: \"\", pw: \"\" })\n\n    const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCredentials({\n            ...credentials,\n            [event.target.name]: event.target.value\n        })\n    }\n\n    const onFormSubmit = () => {\n        const body = {\n            name: credentials.name,\n            password: credentials.pw\n        }\n        axios.post(\"/authenticate\", body)\n            .then((resp) => {\n                console.log(\"resp\", resp)\n            }).catch((err) => {\n                console.error(\"ERRR\", err)\n            })\n    }\n\n    const onTestRequest = () => {\n        axios.get(\"/users/cities\")\n            .then((rep) => {\n                console.log(\"rRESP\", rep.data)\n            }).catch(err => {\n                console.error(\"ERRRR\", err)\n            })\n    }\n    const onTestRequest2 = () => {\n        axios.post(\"/users/cities\", {\n            cityId: 558055\n        })\n            .then((rep) => {\n                console.log(\"rRESP\", rep.data)\n            }).catch(err => {\n                console.error(\"ERRRR\", err)\n            })\n    }\n    const onTestRequest3 = () => {\n        axios.get(\"/city/buda\")\n            .then((rep) => {\n                console.log(\"rRESP\", rep.data)\n            }).catch(err => {\n                console.error(\"ERRRR\", err)\n            })\n    }\n    const onTestRequest4 = () => {\n        axios.get(\"/weather/3054643\")\n            .then((rep) => {\n                console.log(\"rRESP\", rep.data)\n            }).catch(err => {\n                console.error(\"ERRRR\", err)\n            })\n    }\n    console.log(\"STOR\", store)\n    return (\n        <Provider store={store}>\n            <Router>\n                <Route exact path=\"/\" component={Login} />\n                <Route path=\"/cities\" component={withAuthentication(Cities)} />\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./css/main.css\"\nimport \"./css/weather-icons.min.css\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}